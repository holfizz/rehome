import { NextRequest, NextResponse } from 'next/server'

const TELEGRAM_BOT_TOKEN =
	process.env.TELEGRAM_BOT_TOKEN ||
	'7825175484:AAFpxFbSkkAO67Kfb9YlOBM4x3dTXk-Bp8U'
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || '-1002762486376'

export async function POST(request: NextRequest) {
	try {
		const body = await request.json()
		const { method, contact } = body

		console.log('Received request:', { method, contact })
		console.log(
			'Using bot token:',
			TELEGRAM_BOT_TOKEN ? 'Token exists' : 'No token'
		)
		console.log('Using chat ID:', TELEGRAM_CHAT_ID)

		if (!method || !contact) {
			return NextResponse.json(
				{ error: '–ú–µ—Ç–æ–¥ —Å–≤—è–∑–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
				{ status: 400 }
			)
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ —Å–≤—è–∑–∏
		const getMethodInfo = (method: string) => {
			switch (method) {
				case 'whatsapp':
					return { icon: 'üì±', name: 'WhatsApp', emoji: 'üü¢' }
				case 'telegram':
					return { icon: '‚úàÔ∏è', name: 'Telegram', emoji: 'üîµ' }
				case 'phone':
					return { icon: 'üìû', name: '–¢–µ–ª–µ—Ñ–æ–Ω', emoji: 'üü†' }
				default:
					return { icon: 'üìû', name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', emoji: '‚ö™' }
			}
		}

		const methodInfo = getMethodInfo(method)
		const timestamp = new Date().toLocaleString('ru-RU', {
			timeZone: 'Europe/Moscow',
			year: 'numeric',
			month: '2-digit',
			day: '2-digit',
			hour: '2-digit',
			minute: '2-digit',
			second: '2-digit',
		})

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		const formatContact = (contact: string, method: string) => {
			if (method === 'phone' || method === 'whatsapp') {
				// –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
				const cleaned = contact.replace(/[^\d+]/g, '')
				if (cleaned.startsWith('8')) {
					return '+7' + cleaned.substring(1)
				}
				return cleaned.startsWith('+') ? cleaned : '+' + cleaned
			}
			return contact
		}

		const formattedContact = formatContact(contact, method)

		// –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
		const message = `üè† –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –° –°–ê–ô–¢–ê REHOME

${methodInfo.emoji} –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: ${methodInfo.icon} ${methodInfo.name}
üìù –ö–æ–Ω—Ç–∞–∫—Ç: ${formattedContact}

üïê –í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: ${timestamp}
üåê –ò—Å—Ç–æ—á–Ω–∏–∫: –°–∞–π—Ç REHOME
`

		console.log('Sending message:', message)
		console.log('To chat ID:', TELEGRAM_CHAT_ID)

		// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø–æ–ª—É—á–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
		const botInfoResponse = await fetch(
			`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getMe`
		)

		if (!botInfoResponse.ok) {
			console.error('Bot token is invalid')
			return NextResponse.json(
				{ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞' },
				{ status: 500 }
			)
		}

		const botInfo = await botInfoResponse.json()
		console.log('Bot info:', botInfo)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
		const telegramResponse = await fetch(
			`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
			{
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					chat_id: TELEGRAM_CHAT_ID,
					text: message,
					disable_web_page_preview: true,
				}),
			}
		)

		const telegramData = await telegramResponse.json()
		console.log('Telegram response:', telegramData)

		if (!telegramResponse.ok) {
			console.error('Telegram API error:', telegramData)

			// –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
			if (
				telegramData.error_code === 400 &&
				telegramData.description.includes('chat not found')
			) {
				return NextResponse.json(
					{
						error:
							'–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∏ ID –≥—Ä—É–ø–ø—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.',
					},
					{ status: 500 }
				)
			}

			return NextResponse.json(
				{ error: `–û—à–∏–±–∫–∞ Telegram API: ${telegramData.description}` },
				{ status: 500 }
			)
		}

		console.log('Message sent successfully:', telegramData)

		return NextResponse.json({
			success: true,
			message: '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram',
			messageId: telegramData.result?.message_id,
		})
	} catch (error) {
		console.error('Error sending message:', error)
		return NextResponse.json(
			{ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
			{ status: 500 }
		)
	}
}
